generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model order_products {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  order_id   Int?
  product_id Int?
  amount     Int?
  price      Float?
  total      Float?
  products   products? @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_order_products_product")
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_orders_products")

  @@index([product_id], map: "fk_order_products_product")
  @@index([order_id], map: "fk_orders_products")
}

model orders {
  id               Int              @id @default(autoincrement())
  created_at       DateTime?        @default(now())
  updated_at       DateTime?        @updatedAt
  table_id         Int?
  total            Float?           @default(0)
  paid             Boolean?
  completed        Boolean?
  requestedPayment Boolean?         @default(false)
  order_products   order_products[]
  tables           tables?          @relation(fields: [table_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_tables_orders")

  @@index([table_id], map: "fk_tables_orders")
}

model products {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?          @db.LongText
  price          Float?           @default(0)
  active         Boolean?
  created_at     DateTime?        @default(now())
  updated_at     DateTime?        @updatedAt
  order_products order_products[]
}

model tables {
  id           Int         @id @default(autoincrement())
  created_at   DateTime?   @default(now())
  updated_at   DateTime?   @updatedAt
  table_number Int?        @unique(map: "table_number")
  active       Boolean?    @default(true)
  taken        Boolean?    @default(false)
  orders       orders[]
  customers    customers[]

  @@index([table_number], map: "idx_tables_table_number")
}

model customers {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String?  @db.VarChar(255)
  email      String?  @unique @db.VarChar(255)
  secret     String?  @db.VarChar(255)
  table_id   Int?
  table      tables?  @relation(fields: [table_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_customers_tables")
}
